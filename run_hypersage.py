# -*- coding: utf-8 -*-
"""224W_FinalProj_HyperSage_JAY'S FINAL EDITED COPY.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AcK_xUZ6H86bfarcymwA037LqTOf9fX7

# **CS224W - Final Project - Hypergraph GraphSAGEs**
> By Jay Liu and Sunwoo Kang

For our final project, we are implementing a fully connected graph neural network to learn node embeddings for a link prediction task. We were inspired by the MGCN paper to learn embeddings informed not only from local neighborhood structure, but from larger graph substructures. A 2-layer GNN can only capture information about the local 2-hop neighborhood of a node, but we can induce the network to capture extra information critical to the link prediction task by training layers on **hypergraphs** desgined to capture additional graph structual information.

In this colab, we detail the process of training and testing a hypergraph convolution network with the following structure: 

(Initialize node embeddings) $\rightarrow$ (Message Passing Convolutions on the Simple Graph: GraphSAGE) $\rightarrow$ (Message Passing Convolutions on the  Hypergraph: GraphSAGE) $\rightarrow$ (Final node embeddings) $\rightarrow$ (Link Prediction Layer)

# **Setup**
"""

# Install packages
!pip install -q torch-scatter -f https://pytorch-geometric.com/whl/torch-1.8.0+cu101.html
!pip install -q torch-sparse -f https://pytorch-geometric.com/whl/torch-1.8.0+cu101.html
!pip install -q torch-geometric
!pip install ogb

# Import packages
import networkx as nx, pandas as pd, numpy as np
import math, torch
from torch.nn.parameter import Parameter
from torch.nn.modules.module import Module
import torch.nn.functional as F
import torch.nn as nn
import sys, pickle

from torch.utils.data import DataLoader
from torch_geometric.utils import negative_sampling
from torch_geometric.nn import GCNConv, SAGEConv
import torch_geometric.transforms as T
from torch_sparse import SparseTensor


from ogb.linkproppred import PygLinkPropPredDataset, Evaluator

"""# **Model Definition**"""

class SAGE(torch.nn.Module):
    def __init__(self, in_channels, hidden_channels, out_channels, num_layers,
                 dropout):
        super(SAGE, self).__init__()

        self.convs = torch.nn.ModuleList()
        self.convs.append(SAGEConv(in_channels, hidden_channels))
        for _ in range(num_layers - 2):
            self.convs.append(SAGEConv(hidden_channels, hidden_channels))
        self.convs.append(SAGEConv(hidden_channels, out_channels))

        self.dropout = dropout

    def reset_parameters(self):
        for conv in self.convs:
            conv.reset_parameters()

    def forward(self, x, adj_t):
        for conv in self.convs[:-1]:
            x = conv(x, adj_t)
            x = F.relu(x)
            x = F.dropout(x, p=self.dropout, training=self.training)
        x = self.convs[-1](x, adj_t)
        return x

class HG_SAGE(nn.Module):
    def __init__(self, node_number, dropout, hidden_dim=256):
 
        super(HG_SAGE, self).__init__()
        self.node_number = node_number
        self.dropout = nn.Dropout(p=dropout)
        self.relu=nn.ReLU()

        self.sage1 = SAGE(hidden_dim, hidden_dim, hidden_dim, num_layers, dropout)
        self.sage2 = SAGE(hidden_dim, hidden_dim, hidden_dim, num_layers, dropout)

    def forward(self, x, adj=None, theta=None):
      
        theta = SparseTensor.from_dense(theta)
        x = self.sage1(x, adj)
        x = self.sage2(x.float(), theta.float())

        x = self.relu(x)
        x = self.dropout(x)
 
        return x

# Define LinkPredictor
class LinkPredictor(torch.nn.Module):
    def __init__(self, in_channels, hidden_channels, out_channels, num_layers,
                 dropout):
        super(LinkPredictor, self).__init__()

        self.lins = torch.nn.ModuleList()
        self.lins.append(torch.nn.Linear(in_channels, hidden_channels))
        for _ in range(num_layers - 2):
            self.lins.append(torch.nn.Linear(hidden_channels, hidden_channels))
        self.lins.append(torch.nn.Linear(hidden_channels, out_channels))

        self.dropout = dropout
        self.lins_in = (in_channels, hidden_channels)
        self.lins_mid = (hidden_channels, hidden_channels)
        self.lins_out = (hidden_channels, out_channels)


    def reset_parameters(self):
        for lin in self.lins:
            lin.reset_parameters()

    def forward(self, x_i, x_j):
        x = x_i * x_j
        
        for lin in self.lins[:-1]:
            x = lin(x.float())
            x = F.relu(x)
            x = F.dropout(x, p=self.dropout, training=self.training)
        x = self.lins[-1](x)
        return torch.sigmoid(x)

# Train model

def train(model, predictor, x, adj_t, theta, split_edge, optimizer, batch_size):

    row, col, _ = adj_t.coo()
    edge_index = torch.stack([col, row], dim=0)

    model.train()
    predictor.train()

    pos_train_edge = split_edge['train']['edge'].to(x.device)

    total_loss = total_examples = 0
    for perm in DataLoader(range(pos_train_edge.size(0)), batch_size,
                           shuffle=True):
        optimizer.zero_grad()
        
        h = model(x, adj_t, theta)

        edge = pos_train_edge[perm].t()

        pos_out = predictor(h[edge[0]], h[edge[1]])
        pos_loss = -torch.log(pos_out + 1e-15).mean()

        edge = negative_sampling(edge_index, num_nodes=x.size(0),
                                 num_neg_samples=perm.size(0), method='dense', force_undirected=True)

        neg_out = predictor(h[edge[0]], h[edge[1]])
        neg_loss = -torch.log(1 - neg_out + 1e-15).mean()

        loss = pos_loss + neg_loss
        loss.backward()

        torch.nn.utils.clip_grad_norm_(x, 1.0)
        torch.nn.utils.clip_grad_norm_(model.parameters(), 1.0)
        torch.nn.utils.clip_grad_norm_(predictor.parameters(), 1.0)

        optimizer.step()

        num_examples = pos_out.size(0)
        total_loss += loss.item() * num_examples
        total_examples += num_examples

    return total_loss / total_examples

#Test model

@torch.no_grad()
def test(model, predictor, x, adj_t, theta, split_edge, evaluator, batch_size):
    model.eval()
    predictor.eval()

    h = model(x, adj_t, theta) 

    pos_train_edge = split_edge['eval_train']['edge'].to(x.device)
    pos_valid_edge = split_edge['valid']['edge'].to(x.device)
    neg_valid_edge = split_edge['valid']['edge_neg'].to(x.device)
    pos_test_edge = split_edge['test']['edge'].to(x.device)
    neg_test_edge = split_edge['test']['edge_neg'].to(x.device)

    pos_train_preds = []
    for perm in DataLoader(range(pos_train_edge.size(0)), batch_size):
        edge = pos_train_edge[perm].t()
        pos_train_preds += [predictor(h[edge[0]], h[edge[1]]).squeeze().cpu()]
    pos_train_pred = torch.cat(pos_train_preds, dim=0)

    pos_valid_preds = []
    for perm in DataLoader(range(pos_valid_edge.size(0)), batch_size):
        edge = pos_valid_edge[perm].t()
        pos_valid_preds += [predictor(h[edge[0]], h[edge[1]]).squeeze().cpu()]
    pos_valid_pred = torch.cat(pos_valid_preds, dim=0)

    neg_valid_preds = []
    for perm in DataLoader(range(neg_valid_edge.size(0)), batch_size):
        edge = neg_valid_edge[perm].t()
        neg_valid_preds += [predictor(h[edge[0]], h[edge[1]]).squeeze().cpu()]
    neg_valid_pred = torch.cat(neg_valid_preds, dim=0)

    pos_test_preds = []
    for perm in DataLoader(range(pos_test_edge.size(0)), batch_size):
        edge = pos_test_edge[perm].t()
        pos_test_preds += [predictor(h[edge[0]], h[edge[1]]).squeeze().cpu()]
    pos_test_pred = torch.cat(pos_test_preds, dim=0)

    neg_test_preds = []
    for perm in DataLoader(range(neg_test_edge.size(0)), batch_size):
        edge = neg_test_edge[perm].t()
        neg_test_preds += [predictor(h[edge[0]], h[edge[1]]).squeeze().cpu()]
    neg_test_pred = torch.cat(neg_test_preds, dim=0)

    for K in [20]:
        evaluator.K = K
        train_hits = evaluator.eval({
            'y_pred_pos': pos_train_pred,
            'y_pred_neg': neg_valid_pred,
        })[f'hits@{K}']
        valid_hits = evaluator.eval({
            'y_pred_pos': pos_valid_pred,
            'y_pred_neg': neg_valid_pred,
        })[f'hits@{K}']
        test_hits = evaluator.eval({
            'y_pred_pos': pos_test_pred,
            'y_pred_neg': neg_test_pred,
        })[f'hits@{K}']

        results = (train_hits, valid_hits, test_hits)

    return results

# Define hyperparameters

log_steps = 10
num_layers = 2
hidden_channels = 256
dropout = 0.5
batch_size = 64*1024
lr=0.005
epochs=200
eval_steps = 5
runs=5

# Import hypergraph incidence matrix and create the hypergraph adjacency matrix.

from google.colab import drive

drive.mount('/content/drive')
DATA_PATH = "/content/drive/MyDrive/Colab/cs224w_final"
infile = open(DATA_PATH + '/theta.pickle','rb')
theta = pickle.load(infile).double()

D = np.zeros((theta.size()[0], theta.size()[1]))
theta_numpy = theta.numpy()
theta_sum = np.sum(theta_numpy, axis=1).tolist()
for idx, val in enumerate(theta_sum):
  D[idx, idx] = val

A_h = torch.mm(theta, theta.T)
A_h = A_h -D
theta = A_h

# Load dataset

device = 'cpu' #f'cuda' if torch.cuda.is_available() else 'cpu'
device = torch.device(device)

dataset = PygLinkPropPredDataset(name='ogbl-ddi',
                                     transform=T.ToSparseTensor())
data = dataset[0]
adj_t = data.adj_t.to(device)

split_edge = dataset.get_edge_split()


# Randomly pick some training samples to perform evaluation on

torch.manual_seed(12345)
idx = torch.randperm(split_edge['train']['edge'].size(0))
idx = idx[:split_edge['valid']['edge'].size(0)]
split_edge['eval_train'] = {'edge': split_edge['train']['edge'][idx]}


# Load model, initial embeddings, the link predictor, and the evaluator

model_hgsage = HG_SAGE(data.num_nodes, dropout=dropout, hidden_dim=hidden_channels).to(device)
model = model_hgsage
emb = torch.nn.Embedding(data.num_nodes, hidden_channels).to(device)
predictor = LinkPredictor(hidden_channels, hidden_channels, 1,
                          num_layers, dropout).to(device)

evaluator = Evaluator(name='ogbl-ddi')

# Train and evaluate model

best_train, best_val, best_test = [], [], []
for run in range(runs):
    best_train_r, best_val_r, best_test_r = None, None, None
    torch.nn.init.xavier_uniform_(emb.weight)
    predictor.reset_parameters()
    optimizer = torch.optim.Adam(
        list(model.parameters()) + list(emb.parameters()) +
        list(predictor.parameters()), lr=lr)
        
    for epoch in range(1, 1 + epochs):
        loss = train(model, predictor, emb.weight, adj_t, theta, split_edge,
                      optimizer, batch_size)

        if epoch % eval_steps == 0:
            results = test(model, predictor, emb.weight, adj_t, theta, split_edge,
                            evaluator, batch_size)
            train_hits, valid_hits, test_hits = results

            if best_train_r is None:
              best_train_r = train_hits
              best_val_r = valid_hits
              best_test_r = test_hits
            

            if train_hits > best_train_r:
              best_train_r = train_hits
            if valid_hits > best_val_r:
              best_val_r = valid_hits
            if test_hits > best_test_r:
              best_test_r = test_hits

        if epoch % log_steps == 0:
            train_hits, valid_hits, test_hits = results
            print(f'Run: {run + 1:02d}, '
                  f'Epoch: {epoch:02d}, '
                  f'Loss: {loss:.4f}, '
                  f'Train: {100 * train_hits:.2f}%, '
                  f'Valid: {100 * valid_hits:.2f}%, '
                  f'Test: {100 * test_hits:.2f}%')
            print('---')
    best_train.append(best_train_r)
    best_val.append(best_val_r)
    best_test.append(best_test_r)

print("Best avg train: " + str(np.mean(best_train)))
print("Best avg val: " + str(np.mean(best_val)))
print("Best avg test: " + str(np.mean(best_test)))