# -*- coding: utf-8 -*-
"""224W_FinalProj_GCN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/186H6cJeuF595CCFr78-lvErWF8wh8eGn
"""

# Install packages
# !pip install -q torch-scatter -f https://pytorch-geometric.com/whl/torch-1.8.0+cu101.html
# !pip install -q torch-sparse -f https://pytorch-geometric.com/whl/torch-1.8.0+cu101.html
# !pip install -q torch-geometric
# !pip install ogb

# Import packages
import networkx as nx, pandas as pd, numpy as np
import math, torch
from torch.nn.parameter import Parameter
from torch.nn.modules.module import Module
import torch.nn.functional as F
import torch.nn as nn
import sys, pickle

from torch.utils.data import DataLoader
from torch_geometric.utils import negative_sampling
from torch_geometric.nn import GCNConv, SAGEConv
import torch_geometric.transforms as T


from ogb.linkproppred import PygLinkPropPredDataset, Evaluator

"""# **MGCN**"""

class GraphConvolution(nn.Module):
    def __init__(self, in_features, out_features, flip=False, bias=True):
        super(GraphConvolution, self).__init__()
        self.in_features = in_features
        self.out_features = out_features
        self.flip = flip
        self.weight = Parameter(torch.FloatTensor(in_features, out_features))
        stdv = 1. / math.sqrt(self.weight.size(1))
        self.weight.data.uniform_(-stdv, stdv)

        if bias:
            self.bias = Parameter(torch.FloatTensor(out_features))
            self.bias.data.uniform_(-stdv, stdv)
        else:
            self.register_parameter('bias', None)

    def forward(self, x, adj):

        support = torch.mm(x, self.weight)

        if self.flip:
          nadj = torch.transpose(adj,0,1)
          output = torch.mm(nadj, support)
        else:
          output = torch.mm(adj, support)

        if self.bias is not None:
            return output + self.bias
        else:
            return output


class HyperGraphConvolution(nn.Module):
    def __init__(self, in_channels, out_channels, bias=True):
        super(HyperGraphConvolution, self).__init__()
        self.in_channels = in_channels
        self.out_channels = out_channels
        self.weight = torch.nn.Parameter(torch.Tensor(self.in_channels, self.out_channels))
        stdv = 1. / math.sqrt(self.weight.size(1))
        self.weight.data.uniform_(-stdv, stdv)
        if bias:
            self.bias = Parameter(torch.FloatTensor(self.out_channels))
            self.bias.data.uniform_(-stdv, stdv)
        else:
            self.register_parameter('bias', None)

    def forward(self, x, theta):
        a = torch.mm(x.double(), self.weight.double())
        output = torch.mm(theta.double(), a)
        if self.bias is not None:
            return output + self.bias
        else:
            return output


class MGCN(nn.Module):
    def __init__(self, node_number, dropout,
                 d_1=256, d_2=256, d_3=256,
                 ini_emb_mode='par',
                 embeddings_ae_or_one_hot=None):
        """
        ini_emb_mode=['par','ae','one_hot']
        d_1: ae,one-hot模式下无效，par模式下，self.ini_embeddings的维度，隐藏层的维度，也是输出层的维度
        d_2: ae，one-hot模式下，压缩的隐藏层维度
        d_3: ae,one-hot模式下，输出的维度
        """

        super(MGCN, self).__init__()
        self.node_number = node_number
        if ini_emb_mode == 'par':
            self.d_1 = d_1  # 256
            self.d_2 = d_1  # 256
            self.d_3 = d_1  # 256
            self.ini_embeddings = torch.nn.Parameter(torch.Tensor(node_number, self.d_1))
            torch.nn.init.xavier_uniform_(self.ini_embeddings)
        elif (ini_emb_mode == 'ae') or (ini_emb_mode == 'one_hot'):

            self.d_1 = embeddings_ae_or_one_hot.shape[1]  # 8560 for one_hot or 200 for ae, maybe
            self.d_2 = d_2  # 200
            self.d_3 = d_3  # 200
            self.ini_embeddings = embeddings_ae_or_one_hot
        elif ini_emb_mode == 'manual_fea':
            self.d_1 = embeddings_ae_or_one_hot.shape[1]  # 36
            self.d_2 = self.d_1  # 36
            self.d_3 = d_3  # 16
            self.ini_embeddings = embeddings_ae_or_one_hot

        else:
            print('WONG INI_EMB_MODE!')

        self.dropout = nn.Dropout(p=dropout)
        self.relu=nn.ReLU()

        self.gcn_k = 5
        self.gcn1 = GraphConvolution(self.d_1, self.d_2, flip=True)  # (200, 100)
        self.gcn2 = GraphConvolution(self.d_2 * self.gcn_k, self.d_3, flip=False)
        self.hcn1 = HyperGraphConvolution(self.d_3, self.d_3)
        self.hcn2 = HyperGraphConvolution(self.d_3, self.d_3)

    def forward(self, adj=None, theta=None):

        x_list = []
        for k in range(self.gcn_k):
            x = self.relu(self.gcn1(self.ini_embeddings, adj))
            # x = F.dropout(x, self.dropout)
            x_list.append(x)

        x = torch.cat(x_list, dim=1)

        x = self.gcn2(x, adj)


        x = self.relu(self.hcn1(x, theta))
        x = self.dropout(x)
        self.embeddings_out = self.hcn2(x, theta)
        return self.embeddings_out

    def embedding_loss(self, embeddings, positive_links, negtive_links):

        left_p = embeddings[positive_links[:, 0]]
        right_p = embeddings[positive_links[:, 1]]
        dots_p = torch.sum(torch.mul(left_p, right_p), dim=1)
        positive_loss = torch.mean(-1.0 * F.logsigmoid(dots_p))
        left_n = embeddings[negtive_links[:, 0]]
        right_n = embeddings[negtive_links[:, 1]]
        dots_n = torch.sum(torch.mul(left_n, right_n), dim=1)
        negtive_loss = torch.mean(-1.0 * torch.log(1.01 - F.sigmoid(dots_n)))

        return positive_loss + negtive_loss

    def save_embeddings(self, data_name='facebook'):
        torch.save(self.embeddings_out, './' + data_name + '_before_' + self.mode + '.embeddings')

"""# **Baseline GCN/SAGE**"""



# Define GNN Structures
class GCN(torch.nn.Module):
    def __init__(self, in_channels, hidden_channels, out_channels, num_layers,
                 dropout):
        super(GCN, self).__init__()

        self.convs = torch.nn.ModuleList()
        self.convs.append(GCNConv(in_channels, hidden_channels, cached=True))
        for _ in range(num_layers - 2):
            self.convs.append(
                GCNConv(hidden_channels, hidden_channels, cached=True))
        self.convs.append(GCNConv(hidden_channels, out_channels, cached=True))

        self.dropout = dropout

    def reset_parameters(self):
        for conv in self.convs:
            conv.reset_parameters()

    def forward(self, x, adj_t):
        for conv in self.convs[:-1]:
            x = conv(x, adj_t)
            x = F.relu(x)
            x = F.dropout(x, p=self.dropout, training=self.training)
        x = self.convs[-1](x, adj_t)
        return x


class SAGE(torch.nn.Module):
    def __init__(self, in_channels, hidden_channels, out_channels, num_layers,
                 dropout):
        super(SAGE, self).__init__()

        self.convs = torch.nn.ModuleList()
        self.convs.append(SAGEConv(in_channels, hidden_channels))
        for _ in range(num_layers - 2):
            self.convs.append(SAGEConv(hidden_channels, hidden_channels))
        self.convs.append(SAGEConv(hidden_channels, out_channels))

        self.dropout = dropout

    def reset_parameters(self):
        for conv in self.convs:
            conv.reset_parameters()

    def forward(self, x, adj_t):
        for conv in self.convs[:-1]:
            x = conv(x, adj_t)
            x = F.relu(x)
            x = F.dropout(x, p=self.dropout, training=self.training)
        x = self.convs[-1](x, adj_t)
        return x

# Define LinkPredictor
class LinkPredictor(torch.nn.Module):
    def __init__(self, in_channels, hidden_channels, out_channels, num_layers,
                 dropout):
        super(LinkPredictor, self).__init__()

        self.lins = torch.nn.ModuleList()
        self.lins.append(torch.nn.Linear(in_channels, hidden_channels))
        for _ in range(num_layers - 2):
            self.lins.append(torch.nn.Linear(hidden_channels, hidden_channels))
        self.lins.append(torch.nn.Linear(hidden_channels, out_channels))

        self.dropout = dropout
        self.lins_in = (in_channels, hidden_channels)
        self.lins_mid = (hidden_channels, hidden_channels)
        self.lins_out = (hidden_channels, out_channels)


    def reset_parameters(self):
        for lin in self.lins:
            lin.reset_parameters()

    def forward(self, x_i, x_j):
        x = x_i * x_j
        
        for lin in self.lins[:-1]:
            x = lin(x.float())
            x = F.relu(x)
            x = F.dropout(x, p=self.dropout, training=self.training)
        x = self.lins[-1](x)
        return torch.sigmoid(x)

# Train model

def train(model, predictor, x, adj_t, theta, split_edge, optimizer, batch_size):

    row, col, _ = adj_t.coo()
    edge_index = torch.stack([col, row], dim=0)

    model.train()
    predictor.train()

    pos_train_edge = split_edge['train']['edge'].to(x.device)

    total_loss = total_examples = 0
    for perm in DataLoader(range(pos_train_edge.size(0)), batch_size,
                           shuffle=True):
        optimizer.zero_grad()

        h = model(x, theta)

        edge = pos_train_edge[perm].t()

        pos_out = predictor(h[edge[0]], h[edge[1]])
        pos_loss = -torch.log(pos_out + 1e-15).mean()

        edge = negative_sampling(edge_index, num_nodes=x.size(0),
                                 num_neg_samples=perm.size(0), method='dense')

        neg_out = predictor(h[edge[0]], h[edge[1]])
        neg_loss = -torch.log(1 - neg_out + 1e-15).mean()

        loss = pos_loss + neg_loss
        loss.backward()

        torch.nn.utils.clip_grad_norm_(x, 1.0)
        torch.nn.utils.clip_grad_norm_(model.parameters(), 1.0)
        torch.nn.utils.clip_grad_norm_(predictor.parameters(), 1.0)

        optimizer.step()

        num_examples = pos_out.size(0)
        total_loss += loss.item() * num_examples
        total_examples += num_examples

    return total_loss / total_examples

@torch.no_grad()
def test(model, predictor, x, adj_t, theta, split_edge, evaluator, batch_size):
    model.eval()
    predictor.eval()

    h = model(x, theta)

    pos_train_edge = split_edge['eval_train']['edge'].to(x.device)
    pos_valid_edge = split_edge['valid']['edge'].to(x.device)
    neg_valid_edge = split_edge['valid']['edge_neg'].to(x.device)
    pos_test_edge = split_edge['test']['edge'].to(x.device)
    neg_test_edge = split_edge['test']['edge_neg'].to(x.device)

    pos_train_preds = []
    for perm in DataLoader(range(pos_train_edge.size(0)), batch_size):
        edge = pos_train_edge[perm].t()
        pos_train_preds += [predictor(h[edge[0]], h[edge[1]]).squeeze().cpu()]
    pos_train_pred = torch.cat(pos_train_preds, dim=0)

    pos_valid_preds = []
    for perm in DataLoader(range(pos_valid_edge.size(0)), batch_size):
        edge = pos_valid_edge[perm].t()
        pos_valid_preds += [predictor(h[edge[0]], h[edge[1]]).squeeze().cpu()]
    pos_valid_pred = torch.cat(pos_valid_preds, dim=0)

    neg_valid_preds = []
    for perm in DataLoader(range(neg_valid_edge.size(0)), batch_size):
        edge = neg_valid_edge[perm].t()
        neg_valid_preds += [predictor(h[edge[0]], h[edge[1]]).squeeze().cpu()]
    neg_valid_pred = torch.cat(neg_valid_preds, dim=0)

    pos_test_preds = []
    for perm in DataLoader(range(pos_test_edge.size(0)), batch_size):
        edge = pos_test_edge[perm].t()
        pos_test_preds += [predictor(h[edge[0]], h[edge[1]]).squeeze().cpu()]
    pos_test_pred = torch.cat(pos_test_preds, dim=0)

    neg_test_preds = []
    for perm in DataLoader(range(neg_test_edge.size(0)), batch_size):
        edge = neg_test_edge[perm].t()
        neg_test_preds += [predictor(h[edge[0]], h[edge[1]]).squeeze().cpu()]
    neg_test_pred = torch.cat(neg_test_preds, dim=0)


    # for K in [10, 20, 30]:
    for K in [20]:
        evaluator.K = K
        train_hits = evaluator.eval({
            'y_pred_pos': pos_train_pred,
            'y_pred_neg': neg_valid_pred,
        })[f'hits@{K}']
        valid_hits = evaluator.eval({
            'y_pred_pos': pos_valid_pred,
            'y_pred_neg': neg_valid_pred,
        })[f'hits@{K}']
        test_hits = evaluator.eval({
            'y_pred_pos': pos_test_pred,
            'y_pred_neg': neg_test_pred,
        })[f'hits@{K}']

        results = (train_hits, valid_hits, test_hits)

    return results

log_steps = 10
num_layers = 2
hidden_channels = 256
dropout = 0.5
batch_size = 64*1024
lr=0.005
epochs=200
eval_steps = 5
runs=10

theta = torch.transpose(pickle.load(open('theta.pickle','rb')).double(), 0, 1)

device = 'cpu' #f'cuda' if torch.cuda.is_available() else 'cpu'
device = torch.device(device)

dataset = PygLinkPropPredDataset(name='ogbl-ddi',
                                     transform=T.ToSparseTensor())
data = dataset[0]
adj_t = data.adj_t.to(device)

split_edge = dataset.get_edge_split()


# We randomly pick some training samples that we want to evaluate on:
torch.manual_seed(12345)
idx = torch.randperm(split_edge['train']['edge'].size(0))
idx = idx[:split_edge['valid']['edge'].size(0)]
split_edge['eval_train'] = {'edge': split_edge['train']['edge'][idx]}

model_sage = SAGE(hidden_channels, hidden_channels,
              hidden_channels, num_layers,
              dropout).to(device)

model_gcn = GCN(hidden_channels, hidden_channels,
                hidden_channels, num_layers,
                dropout).to(device)

model_mgcn = MGCN(data.num_nodes, dropout=dropout, d_1=hidden_channels, d_2=hidden_channels, d_3=hidden_channels).to(device)
# dummy_theta = torch.ones(data.num_nodes, data.num_nodes)
# dummy_dp = nn.Dropout(p=0.8)
# dummy_theta = dummy_dp(dummy_theta)


# models = [model_mgcn, model_sage, model_gcn]
model = model_mgcn
emb = torch.nn.Embedding(data.num_nodes, hidden_channels).to(device)
predictor = LinkPredictor(hidden_channels, hidden_channels, 1,
                          num_layers, dropout).to(device)

evaluator = Evaluator(name='ogbl-ddi')

best_train, best_val, best_test = None, None, None
# for model, modelname in zip(models, ['SAGE', 'GCN']):
for run in range(runs):
    torch.nn.init.xavier_uniform_(emb.weight)
    # model.reset_parameters()
    predictor.reset_parameters()
    # optimizer = torch.optim.Adam(model.parameters(), lr=0.0001, weight_decay=0.00005)
    optimizer = torch.optim.Adam(
        list(model.parameters()) + list(emb.parameters()) +
        list(predictor.parameters()), lr=lr)

    for epoch in range(1, 1 + epochs):
        loss = train(model, predictor, emb.weight, adj_t, theta, split_edge,
                      optimizer, batch_size)

        if epoch % eval_steps == 0:
            results = test(model, predictor, emb.weight, adj_t, theta, split_edge,
                            evaluator, batch_size)
            train_hits, valid_hits, test_hits = results

            if best_train is None:
              best_train = train_hits
              best_val = valid_hits
              best_test = test_hits
            

            if train_hits > best_train:
              best_train = train_hits
            if valid_hits > best_val:
              best_val = valid_hits
            if test_hits > best_test:
              best_test = test_hits

        if epoch % log_steps == 0:
            train_hits, valid_hits, test_hits = results
            print(f'Run: {run + 1:02d}, '
                  f'Epoch: {epoch:02d}, '
                  f'Loss: {loss:.4f}, '
                  f'Train: {100 * train_hits:.2f}%, '
                  f'Valid: {100 * valid_hits:.2f}%, '
                  f'Test: {100 * test_hits:.2f}%')
            print('---')

print("Best train: " + str(best_train))
print("Best val: " + str(best_val))
print("Best test: " + str(best_test))

"""Hey

"""